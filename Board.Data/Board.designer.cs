#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Board.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Board")]
	public partial class BoardDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAuth(Auth instance);
    partial void UpdateAuth(Auth instance);
    partial void DeleteAuth(Auth instance);
    partial void InsertUserToRole(UserToRole instance);
    partial void UpdateUserToRole(UserToRole instance);
    partial void DeleteUserToRole(UserToRole instance);
    partial void InsertAuthToRole(AuthToRole instance);
    partial void UpdateAuthToRole(AuthToRole instance);
    partial void DeleteAuthToRole(AuthToRole instance);
    partial void InsertFolder(Folder instance);
    partial void UpdateFolder(Folder instance);
    partial void DeleteFolder(Folder instance);
    partial void InsertItemtemp(Itemtemp instance);
    partial void UpdateItemtemp(Itemtemp instance);
    partial void DeleteItemtemp(Itemtemp instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertSeatHistory(SeatHistory instance);
    partial void UpdateSeatHistory(SeatHistory instance);
    partial void DeleteSeatHistory(SeatHistory instance);
    partial void InsertSelprop(Selprop instance);
    partial void UpdateSelprop(Selprop instance);
    partial void DeleteSelprop(Selprop instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BoardDataContext() : 
				base(global::Board.Data.Properties.Settings.Default.BoardConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Auth> Auth
		{
			get
			{
				return this.GetTable<Auth>();
			}
		}
		
		public System.Data.Linq.Table<UserToRole> UserToRole
		{
			get
			{
				return this.GetTable<UserToRole>();
			}
		}
		
		public System.Data.Linq.Table<AuthToRole> AuthToRole
		{
			get
			{
				return this.GetTable<AuthToRole>();
			}
		}
		
		public System.Data.Linq.Table<Folder> Folder
		{
			get
			{
				return this.GetTable<Folder>();
			}
		}
		
		public System.Data.Linq.Table<Itemtemp> Itemtemp
		{
			get
			{
				return this.GetTable<Itemtemp>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seat
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<SeatHistory> SeatHistory
		{
			get
			{
				return this.GetTable<SeatHistory>();
			}
		}
		
		public System.Data.Linq.Table<Selprop> Selprop
		{
			get
			{
				return this.GetTable<Selprop>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Auth")]
	public partial class Auth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private System.Nullable<int> _key1;
		
		private System.Nullable<int> _key2;
		
		private System.Nullable<int> _key3;
		
		private int _type;
		
		private EntitySet<AuthToRole> _AuthToRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onkey1Changing(System.Nullable<int> value);
    partial void Onkey1Changed();
    partial void Onkey2Changing(System.Nullable<int> value);
    partial void Onkey2Changed();
    partial void Onkey3Changing(System.Nullable<int> value);
    partial void Onkey3Changed();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public Auth()
		{
			this._AuthToRole = new EntitySet<AuthToRole>(new Action<AuthToRole>(this.attach_AuthToRole), new Action<AuthToRole>(this.detach_AuthToRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_key1", DbType="Int")]
		public System.Nullable<int> key1
		{
			get
			{
				return this._key1;
			}
			set
			{
				if ((this._key1 != value))
				{
					this.Onkey1Changing(value);
					this.SendPropertyChanging();
					this._key1 = value;
					this.SendPropertyChanged("key1");
					this.Onkey1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_key2", DbType="Int")]
		public System.Nullable<int> key2
		{
			get
			{
				return this._key2;
			}
			set
			{
				if ((this._key2 != value))
				{
					this.Onkey2Changing(value);
					this.SendPropertyChanging();
					this._key2 = value;
					this.SendPropertyChanged("key2");
					this.Onkey2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_key3", DbType="Int")]
		public System.Nullable<int> key3
		{
			get
			{
				return this._key3;
			}
			set
			{
				if ((this._key3 != value))
				{
					this.Onkey3Changing(value);
					this.SendPropertyChanging();
					this._key3 = value;
					this.SendPropertyChanged("key3");
					this.Onkey3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auth_AuthToRole", Storage="_AuthToRole", ThisKey="id", OtherKey="authId")]
		public EntitySet<AuthToRole> AuthToRole
		{
			get
			{
				return this._AuthToRole;
			}
			set
			{
				this._AuthToRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthToRole(AuthToRole entity)
		{
			this.SendPropertyChanging();
			entity.Auth = this;
		}
		
		private void detach_AuthToRole(AuthToRole entity)
		{
			this.SendPropertyChanging();
			entity.Auth = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserToRole")]
	public partial class UserToRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _roleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public UserToRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserToRole", Storage="_Role", ThisKey="roleId", OtherKey="id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserToRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserToRole.Add(this);
						this._roleId = value.id;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserToRole", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserToRole.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserToRole.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthToRole")]
	public partial class AuthToRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _authId;
		
		private int _roleId;
		
		private EntityRef<Auth> _Auth;
		
		private EntityRef<Role> _Role;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnauthIdChanging(int value);
    partial void OnauthIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public AuthToRole()
		{
			this._Auth = default(EntityRef<Auth>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int authId
		{
			get
			{
				return this._authId;
			}
			set
			{
				if ((this._authId != value))
				{
					if (this._Auth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthIdChanging(value);
					this.SendPropertyChanging();
					this._authId = value;
					this.SendPropertyChanged("authId");
					this.OnauthIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auth_AuthToRole", Storage="_Auth", ThisKey="authId", OtherKey="id", IsForeignKey=true)]
		public Auth Auth
		{
			get
			{
				return this._Auth.Entity;
			}
			set
			{
				Auth previousValue = this._Auth.Entity;
				if (((previousValue != value) 
							|| (this._Auth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Auth.Entity = null;
						previousValue.AuthToRole.Remove(this);
					}
					this._Auth.Entity = value;
					if ((value != null))
					{
						value.AuthToRole.Add(this);
						this._authId = value.id;
					}
					else
					{
						this._authId = default(int);
					}
					this.SendPropertyChanged("Auth");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AuthToRole", Storage="_Role", ThisKey="roleId", OtherKey="id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AuthToRole.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AuthToRole.Add(this);
						this._roleId = value.id;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Folder")]
	public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _parentFolderId;
		
		private string _description;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentFolderIdChanging(System.Nullable<int> value);
    partial void OnparentFolderIdChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Folder()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(64)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentFolderId", DbType="Int")]
		public System.Nullable<int> parentFolderId
		{
			get
			{
				return this._parentFolderId;
			}
			set
			{
				if ((this._parentFolderId != value))
				{
					this.OnparentFolderIdChanging(value);
					this.SendPropertyChanging();
					this._parentFolderId = value;
					this.SendPropertyChanged("parentFolderId");
					this.OnparentFolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(256)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Itemtemp")]
	public partial class Itemtemp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private string _toHtml;
		
		private string _props;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntoHtmlChanging(string value);
    partial void OntoHtmlChanged();
    partial void OnpropsChanging(string value);
    partial void OnpropsChanged();
    #endregion
		
		public Itemtemp()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(64)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_toHtml", DbType="NVarChar(MAX)")]
		public string toHtml
		{
			get
			{
				return this._toHtml;
			}
			set
			{
				if ((this._toHtml != value))
				{
					this.OntoHtmlChanging(value);
					this.SendPropertyChanging();
					this._toHtml = value;
					this.SendPropertyChanged("toHtml");
					this.OntoHtmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_props", DbType="NVarChar(1024)")]
		public string props
		{
			get
			{
				return this._props;
			}
			set
			{
				if ((this._props != value))
				{
					this.OnpropsChanging(value);
					this.SendPropertyChanging();
					this._props = value;
					this.SendPropertyChanged("props");
					this.OnpropsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private EntitySet<UserToRole> _UserToRole;
		
		private EntitySet<AuthToRole> _AuthToRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Role()
		{
			this._UserToRole = new EntitySet<UserToRole>(new Action<UserToRole>(this.attach_UserToRole), new Action<UserToRole>(this.detach_UserToRole));
			this._AuthToRole = new EntitySet<AuthToRole>(new Action<AuthToRole>(this.attach_AuthToRole), new Action<AuthToRole>(this.detach_AuthToRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserToRole", Storage="_UserToRole", ThisKey="id", OtherKey="roleId")]
		public EntitySet<UserToRole> UserToRole
		{
			get
			{
				return this._UserToRole;
			}
			set
			{
				this._UserToRole.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AuthToRole", Storage="_AuthToRole", ThisKey="id", OtherKey="roleId")]
		public EntitySet<AuthToRole> AuthToRole
		{
			get
			{
				return this._AuthToRole;
			}
			set
			{
				this._AuthToRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserToRole(UserToRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserToRole(UserToRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_AuthToRole(AuthToRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_AuthToRole(AuthToRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private System.Nullable<int> _parentFolderId;
		
		private string _tempJson;
		
		private string _tempHtml;
		
		private string _defineJson;
		
		private string _cache;
		
		private int _editingUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnparentFolderIdChanging(System.Nullable<int> value);
    partial void OnparentFolderIdChanged();
    partial void OntempJsonChanging(string value);
    partial void OntempJsonChanged();
    partial void OntempHtmlChanging(string value);
    partial void OntempHtmlChanged();
    partial void OndefineJsonChanging(string value);
    partial void OndefineJsonChanged();
    partial void OncacheChanging(string value);
    partial void OncacheChanged();
    partial void OneditingUserChanging(int value);
    partial void OneditingUserChanged();
    #endregion
		
		public Seat()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(64)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentFolderId", DbType="Int")]
		public System.Nullable<int> parentFolderId
		{
			get
			{
				return this._parentFolderId;
			}
			set
			{
				if ((this._parentFolderId != value))
				{
					this.OnparentFolderIdChanging(value);
					this.SendPropertyChanging();
					this._parentFolderId = value;
					this.SendPropertyChanged("parentFolderId");
					this.OnparentFolderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tempJson", DbType="NVarChar(1000)")]
		public string tempJson
		{
			get
			{
				return this._tempJson;
			}
			set
			{
				if ((this._tempJson != value))
				{
					this.OntempJsonChanging(value);
					this.SendPropertyChanging();
					this._tempJson = value;
					this.SendPropertyChanged("tempJson");
					this.OntempJsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tempHtml", DbType="NVarChar(MAX)")]
		public string tempHtml
		{
			get
			{
				return this._tempHtml;
			}
			set
			{
				if ((this._tempHtml != value))
				{
					this.OntempHtmlChanging(value);
					this.SendPropertyChanging();
					this._tempHtml = value;
					this.SendPropertyChanged("tempHtml");
					this.OntempHtmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_defineJson", DbType="NVarChar(MAX)")]
		public string defineJson
		{
			get
			{
				return this._defineJson;
			}
			set
			{
				if ((this._defineJson != value))
				{
					this.OndefineJsonChanging(value);
					this.SendPropertyChanging();
					this._defineJson = value;
					this.SendPropertyChanged("defineJson");
					this.OndefineJsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cache", DbType="NVarChar(MAX)")]
		public string cache
		{
			get
			{
				return this._cache;
			}
			set
			{
				if ((this._cache != value))
				{
					this.OncacheChanging(value);
					this.SendPropertyChanging();
					this._cache = value;
					this.SendPropertyChanged("cache");
					this.OncacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_editingUser", DbType="Int NOT NULL")]
		public int editingUser
		{
			get
			{
				return this._editingUser;
			}
			set
			{
				if ((this._editingUser != value))
				{
					this.OneditingUserChanging(value);
					this.SendPropertyChanging();
					this._editingUser = value;
					this.SendPropertyChanged("editingUser");
					this.OneditingUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeatHistory")]
	public partial class SeatHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _seatName;
		
		private string _cache;
		
		private System.Nullable<System.DateTime> _endTime;
		
		private System.Nullable<System.DateTime> _startTime;
		
		private string _userName;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnseatNameChanging(string value);
    partial void OnseatNameChanged();
    partial void OncacheChanging(string value);
    partial void OncacheChanged();
    partial void OnendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendTimeChanged();
    partial void OnstartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnstartTimeChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    #endregion
		
		public SeatHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seatName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string seatName
		{
			get
			{
				return this._seatName;
			}
			set
			{
				if ((this._seatName != value))
				{
					this.OnseatNameChanging(value);
					this.SendPropertyChanging();
					this._seatName = value;
					this.SendPropertyChanged("seatName");
					this.OnseatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cache", DbType="NVarChar(MAX)")]
		public string cache
		{
			get
			{
				return this._cache;
			}
			set
			{
				if ((this._cache != value))
				{
					this.OncacheChanging(value);
					this.SendPropertyChanging();
					this._cache = value;
					this.SendPropertyChanged("cache");
					this.OncacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Selprop")]
	public partial class Selprop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private string _className;
		
		private int _type;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnclassNameChanging(string value);
    partial void OnclassNameChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public Selprop()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_className", DbType="NVarChar(64)")]
		public string className
		{
			get
			{
				return this._className;
			}
			set
			{
				if ((this._className != value))
				{
					this.OnclassNameChanging(value);
					this.SendPropertyChanging();
					this._className = value;
					this.SendPropertyChanged("className");
					this.OnclassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _act;
		
		private string _name;
		
		private string _password;
		
		private string _storedata;
		
		private string _cusfolder;
		
		private EntitySet<UserToRole> _UserToRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnactChanging(int value);
    partial void OnactChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstoredataChanging(string value);
    partial void OnstoredataChanged();
    partial void OncusfolderChanging(string value);
    partial void OncusfolderChanged();
    #endregion
		
		public User()
		{
			this._UserToRole = new EntitySet<UserToRole>(new Action<UserToRole>(this.attach_UserToRole), new Action<UserToRole>(this.detach_UserToRole));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_act", DbType="Int NOT NULL")]
		public int act
		{
			get
			{
				return this._act;
			}
			set
			{
				if ((this._act != value))
				{
					this.OnactChanging(value);
					this.SendPropertyChanging();
					this._act = value;
					this.SendPropertyChanged("act");
					this.OnactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_storedata", DbType="NVarChar(MAX)")]
		public string storedata
		{
			get
			{
				return this._storedata;
			}
			set
			{
				if ((this._storedata != value))
				{
					this.OnstoredataChanging(value);
					this.SendPropertyChanging();
					this._storedata = value;
					this.SendPropertyChanged("storedata");
					this.OnstoredataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cusfolder", DbType="NVarChar(MAX)")]
		public string cusfolder
		{
			get
			{
				return this._cusfolder;
			}
			set
			{
				if ((this._cusfolder != value))
				{
					this.OncusfolderChanging(value);
					this.SendPropertyChanging();
					this._cusfolder = value;
					this.SendPropertyChanged("cusfolder");
					this.OncusfolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserToRole", Storage="_UserToRole", ThisKey="id", OtherKey="userId")]
		public EntitySet<UserToRole> UserToRole
		{
			get
			{
				return this._UserToRole;
			}
			set
			{
				this._UserToRole.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserToRole(UserToRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserToRole(UserToRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
